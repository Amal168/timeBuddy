// lib/main.dart
import 'dart:math';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

// Firebase
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:timebuddy/splachscreen.dart';
import 'firebase_options.dart'; // generated by flutterfire configure

/* ========================= BOOT ========================= */

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(const TimeBuddyApp());
}

/* ========================= APP ROOT ========================= */

class TimeBuddyApp extends StatelessWidget {
  const TimeBuddyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Time Buddy',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorSchemeSeed: const Color(0xFF5B86E5),
        useMaterial3: true,
        scaffoldBackgroundColor: Colors.grey.shade100,
        chipTheme: ChipThemeData(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
      ),
      home: const AdminDashboard(),
    );
  }
}

/* ========================= SPLASH ========================= */

/* ========================= MODELS ========================= */

class Mentor {
  final String id;
  final String name;
  final String email;
  final List<String> teachingCourses;
  final List<String> studentIds;

  Mentor({
    required this.id,
    required this.name,
    required this.email,
    required this.teachingCourses,
    required this.studentIds,
  });
}

enum ScheduleStatus { scheduled, cancelled, rescheduled }

class Schedule {
  final String id;
  final String courseName;
  final String mentorId;
  final String studentId;
  DateTime scheduledTime;
  ScheduleStatus status;

  Schedule({
    required this.id,
    required this.courseName,
    required this.mentorId,
    required this.studentId,
    required this.scheduledTime,
    this.status = ScheduleStatus.scheduled,
  });

  String get formattedTime =>
      DateFormat('EEE, MMM d â€¢ h:mm a').format(scheduledTime);
  String get statusText => switch (status) {
        ScheduleStatus.scheduled => 'Scheduled',
        ScheduleStatus.cancelled => 'Cancelled',
        ScheduleStatus.rescheduled => 'Rescheduled',
      };
}

enum TaskStatus { pending, inProgress, completed }

class Task {
  final String id;
  final String name;
  final String courseName;
  final String assignedTo; // display name or email
  final DateTime deadline;
  final String? description;
  TaskStatus status;

  Task({
    required this.id,
    required this.name,
    required this.courseName,
    required this.assignedTo,
    required this.deadline,
    this.status = TaskStatus.pending,
    this.description,
  });

  String get statusText => switch (status) {
        TaskStatus.pending => 'Pending',
        TaskStatus.inProgress => 'In Progress',
        TaskStatus.completed => 'Completed',
      };

  bool get isOverdue =>
      status != TaskStatus.completed &&
      DateTime.now()
          .isAfter(deadline.add(const Duration(hours: 23, minutes: 59)));
}

enum NotificationType { scheduleCancelled, scheduleRescheduled, taskAssigned }

class AppNotification {
  final String id;
  final String title;
  final String message;
  final NotificationType type;
  final DateTime timestamp;
  bool isRead;

  AppNotification({
    required this.id,
    required this.title,
    required this.message,
    required this.type,
    required this.timestamp,
    this.isRead = false,
  });

  String get timeAgo {
    final diff = DateTime.now().difference(timestamp);
    if (diff.inMinutes < 1) return 'Just now';
    if (diff.inMinutes < 60) return '${diff.inMinutes}m ago';
    if (diff.inHours < 24) return '${diff.inHours}h ago';
    return '${diff.inDays}d ago';
  }
}

/* ========================= MODEL MAPPERS (FIRESTORE) ========================= */

extension MentorX on Mentor {
  Map<String, dynamic> toMap() => {
        'name': name,
        'email': email,
        'teachingCourses': teachingCourses,
        'studentIds': studentIds,
      };

  static Mentor fromDoc(DocumentSnapshot doc) {
    final d = doc.data()! as Map<String, dynamic>;
    return Mentor(
      id: doc.id,
      name: d['name'] ?? '',
      email: d['email'] ?? '',
      teachingCourses: List<String>.from(d['teachingCourses'] ?? []),
      studentIds: List<String>.from(d['studentIds'] ?? []),
    );
  }
}

extension ScheduleX on Schedule {
  Map<String, dynamic> toMap() => {
        'courseName': courseName,
        'mentorId': mentorId,
        'studentId': studentId,
        'scheduledTime': Timestamp.fromDate(scheduledTime),
        'status': status.name,
      };

  static Schedule fromDoc(DocumentSnapshot doc) {
    final d = doc.data()! as Map<String, dynamic>;
    return Schedule(
      id: doc.id,
      courseName: d['courseName'] ?? '',
      mentorId: d['mentorId'] ?? '',
      studentId: d['studentId'] ?? '',
      scheduledTime: (d['scheduledTime'] as Timestamp).toDate(),
      status: ScheduleStatus.values.firstWhere(
        (e) => e.name == (d['status'] ?? 'scheduled'),
        orElse: () => ScheduleStatus.scheduled,
      ),
    );
  }
}

extension TaskX on Task {
  Map<String, dynamic> toMap() => {
        'name': name,
        'courseName': courseName,
        'assignedTo': assignedTo,
        'deadline': Timestamp.fromDate(deadline),
        'status': status.name,
        'description': description,
      };

  static Task fromDoc(DocumentSnapshot doc) {
    final d = doc.data()! as Map<String, dynamic>;
    return Task(
      id: doc.id,
      name: d['name'] ?? '',
      courseName: d['courseName'] ?? '',
      assignedTo: d['assignedTo'] ?? '',
      deadline: (d['deadline'] as Timestamp).toDate(),
      status: TaskStatus.values.firstWhere(
        (e) => e.name == (d['status'] ?? 'pending'),
        orElse: () => TaskStatus.pending,
      ),
      description: d['description'],
    );
  }
}

extension AppNotificationX on AppNotification {
  Map<String, dynamic> toMap() => {
        'title': title,
        'message': message,
        'type': type.name,
        'timestamp': Timestamp.fromDate(timestamp),
        'isRead': isRead,
        // optional targeting fields:
        // 'userRole': 'admin' | 'intern',
        // 'userId': 'uid',
      };

  static AppNotification fromDoc(DocumentSnapshot doc) {
    final d = doc.data()! as Map<String, dynamic>;
    return AppNotification(
      id: doc.id,
      title: d['title'] ?? '',
      message: d['message'] ?? '',
      type: NotificationType.values.firstWhere(
        (e) => e.name == (d['type'] ?? 'taskAssigned'),
        orElse: () => NotificationType.taskAssigned,
      ),
      timestamp: (d['timestamp'] as Timestamp).toDate(),
      isRead: d['isRead'] ?? false,
    );
  }
}

/* ========================= REPOSITORY ========================= */

class FireRepo {
  final _db = FirebaseFirestore.instance;

  Future<String?> getUserRole(String uid) async {
    final doc = await _db.collection('users').doc(uid).get();
    return (doc.data()?['role'] as String?);
  }

  // Mentors
  Stream<List<Mentor>> mentorsStream() => _db
      .collection('mentors')
      .snapshots()
      .map((s) => s.docs.map(MentorX.fromDoc).toList());

  // Schedules
  Stream<List<Schedule>> schedulesStream({String? course, String? studentId}) {
    Query q = _db.collection('schedules');
    if (course != null) q = q.where('courseName', isEqualTo: course);
    if (studentId != null) q = q.where('studentId', isEqualTo: studentId);
    return q.orderBy('scheduledTime').snapshots().map(
          (s) => s.docs.map(ScheduleX.fromDoc).toList(),
        );
  }

  Future<void> createSchedule(Schedule s) async {
    await _db.collection('schedules').add(s.toMap());
  }

  Future<void> updateSchedule(String id, Map<String, dynamic> data) async {
    await _db.collection('schedules').doc(id).update(data);
  }

  // Tasks
  Stream<List<Task>> tasksStream({String? assignedTo}) {
    Query q = _db.collection('tasks');
    if (assignedTo != null) q = q.where('assignedTo', isEqualTo: assignedTo);
    return q.orderBy('deadline').snapshots().map(
          (s) => s.docs.map(TaskX.fromDoc).toList(),
        );
  }

  Future<void> addTask(Task t) async {
    await _db.collection('tasks').add(t.toMap());
  }

  Future<void> updateTask(String id, Map<String, dynamic> data) async {
    await _db.collection('tasks').doc(id).update(data);
  }

  // Notifications
  Stream<List<AppNotification>> notificationsStream(
      {String? userRole, String? userId}) {
    Query q =
        _db.collection('notifications').orderBy('timestamp', descending: true);
    if (userRole != null) q = q.where('userRole', isEqualTo: userRole);
    if (userId != null) q = q.where('userId', isEqualTo: userId);
    return q.snapshots().map(
          (s) => s.docs.map(AppNotificationX.fromDoc).toList(),
        );
  }

  Future<void> addNotification(AppNotification n) async {
    await _db.collection('notifications').add(n.toMap());
  }
}

final fireRepo = FireRepo();

/* ========================= LOGIN ========================= */

enum UserRole { admin, intern }


class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  UserRole _selectedRole = UserRole.admin; // default role
  final _formKey = GlobalKey<FormState>();
  final _email = TextEditingController();
  final _password = TextEditingController();
  bool _obscure = true;

  @override
  void dispose() {
    _email.dispose();
    _password.dispose();
    super.dispose();
  }

  Widget _roleSegment() {
    return CupertinoSegmentedControl<UserRole>(
      groupValue: _selectedRole,
      padding: const EdgeInsets.all(2),
      children: const {
        UserRole.admin: Padding(
          padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
          child: Text('Admin'),
        ),
        UserRole.intern: Padding(
          padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
          child: Text('Intern'),
        ),
      },
      onValueChanged: (val) => setState(() => _selectedRole = val),
    );
  }

  void _login() {
    if (_formKey.currentState?.validate() != true) return;

    // Simple navigation based on role
    if (_selectedRole == UserRole.admin) {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const AdminDashboard()),
      );
    } else {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const InternDashboard()),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final card = Card(
      elevation: 0,
      color: Colors.white,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(24)),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Time Buddy',
                  style: Theme.of(context)
                      .textTheme
                      .headlineSmall
                      ?.copyWith(fontWeight: FontWeight.w800)),
              const SizedBox(height: 16),
              _roleSegment(),
              const SizedBox(height: 16),
              TextFormField(
                controller: _email,
                decoration: const InputDecoration(
                  labelText: 'Email',
                  prefixIcon: Icon(Icons.email_outlined),
                  border: OutlineInputBorder(),
                ),
                validator: (v) =>
                    (v == null || v.isEmpty) ? 'Email required' : null,
              ),
              const SizedBox(height: 12),
              TextFormField(
                controller: _password,
                obscureText: _obscure,
                decoration: InputDecoration(
                  labelText: 'Password',
                  prefixIcon: const Icon(Icons.lock_outline),
                  border: const OutlineInputBorder(),
                  suffixIcon: IconButton(
                    onPressed: () => setState(() => _obscure = !_obscure),
                    icon: Icon(
                        _obscure ? Icons.visibility : Icons.visibility_off),
                  ),
                ),
                validator: (v) =>
                    (v == null || v.isEmpty) ? 'Password required' : null,
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: FilledButton(
                  onPressed: _login,
                  child: const Text('Login'),
                ),
              ),
            ],
          ),
        ),
      ),
    );

    return Scaffold(
      body: Center(
        child: ConstrainedBox(
          constraints: const BoxConstraints(maxWidth: 420),
          child: Padding(padding: const EdgeInsets.all(16.0), child: card),
        ),
      ),
    );
  }
}

/* ========================= ADMIN DASHBOARD ========================= */

class AdminDashboard extends StatefulWidget {
  const AdminDashboard({super.key});

  @override
  State<AdminDashboard> createState() => _AdminDashboardState();
}

class _AdminDashboardState extends State<AdminDashboard> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    final pages = [
      _buildMentorsStudentsTab(),
      _buildScheduleTab(),
      _buildTasksTab(),
      _buildNotificationsTab(),
    ];

    return Scaffold(
      appBar: AppBar(
        title: const Text('Admin Dashboard'),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () async {
              await FirebaseAuth.instance.signOut();
              if (!mounted) return;
              Navigator.pushReplacement(context,
                  MaterialPageRoute(builder: (_) => const LoginPage()));
            },
          ),
        ],
      ),
      body: pages[_currentIndex],
      bottomNavigationBar: NavigationBar(
        selectedIndex: _currentIndex,
        onDestinationSelected: (i) => setState(() => _currentIndex = i),
        destinations: const [
          NavigationDestination(
            icon: Icon(Icons.people_alt_outlined),
            label: 'Mentors',
          ),
          NavigationDestination(
            icon: Icon(Icons.schedule_outlined),
            label: 'Schedule',
          ),
          NavigationDestination(
            icon: Icon(Icons.assignment_outlined),
            label: 'Tasks',
          ),
          NavigationDestination(
            icon: Icon(Icons.notifications_outlined),
            label: 'Alerts',
          ),
        ],
      ),
      floatingActionButton: _currentIndex == 1
          ? FloatingActionButton.extended(
              onPressed: _showCreateScheduleDialog,
              icon: const Icon(Icons.add),
              label: const Text('Create'),
            )
          : _currentIndex == 2
              ? FloatingActionButton.extended(
                  onPressed: _showCreateTaskDialog,
                  icon: const Icon(Icons.add_task),
                  label: const Text('Assign'),
                )
              : null,
    );
  }

  /* ---------- Mentors & Students ---------- */
  Widget _buildMentorsStudentsTab() {
    return StreamBuilder<List<Mentor>>(
      stream: fireRepo.mentorsStream(),
      builder: (context, snap) {
        if (snap.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        final mentors = snap.data ?? [];
        return Padding(
          padding: const EdgeInsets.all(16),
          child: GridView.builder(
            itemCount: mentors.length,
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 1,
              mainAxisSpacing: 16,
              crossAxisSpacing: 16,
              childAspectRatio: 2.4,
            ),
            itemBuilder: (_, i) => _mentorCard(mentors[i]),
          ),
        );
      },
    );
  }

  Widget _mentorCard(Mentor mentor) {
    return Container(
      decoration: _cardDeco(),
      padding: const EdgeInsets.all(16),
      child: Row(
        children: [
          CircleAvatar(
            radius: 28,
            child: Text(mentor.name
                .split(' ')
                .where((e) => e.isNotEmpty)
                .map((e) => e[0])
                .take(2)
                .join()),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(mentor.name,
                    style: const TextStyle(
                        fontWeight: FontWeight.w700, fontSize: 16)),
                Text(mentor.email, style: _muted),
                const SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  runSpacing: -4,
                  children: mentor.teachingCourses
                      .map((c) => Chip(
                            label: Text(c),
                            backgroundColor: Colors.blue.shade50,
                          ))
                      .toList(),
                ),
                const Spacer(),
                Text('${mentor.studentIds.length} students assigned',
                    style: _muted),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /* ---------- Schedule ---------- */
  Widget _buildScheduleTab() {
    return StreamBuilder<List<Schedule>>(
      stream: fireRepo.schedulesStream(),
      builder: (context, snap) {
        if (snap.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        final schedules = snap.data ?? [];
        return Padding(
          padding: const EdgeInsets.all(16),
          child: ListView.separated(
            itemBuilder: (_, i) => _scheduleTile(schedules[i]),
            separatorBuilder: (_, __) => const SizedBox(height: 12),
            itemCount: schedules.length,
          ),
        );
      },
    );
  }

  Widget _scheduleTile(Schedule s) {
    return Container(
      decoration: _cardDeco(),
      child: ListTile(
        contentPadding: const EdgeInsets.all(16),
        title: Text(s.courseName,
            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w700)),
        subtitle: Padding(
          padding: const EdgeInsets.only(top: 6),
          child: Text(s.formattedTime, style: _muted),
        ),
        trailing: Chip(
          label: Text(s.statusText),
          backgroundColor: switch (s.status) {
            ScheduleStatus.scheduled => Colors.green.shade100,
            ScheduleStatus.cancelled => Colors.red.shade100,
            ScheduleStatus.rescheduled => Colors.orange.shade100,
          },
        ),
      ),
    );
  }

  /* ---------- Tasks ---------- */
  Widget _buildTasksTab() {
    return StreamBuilder<List<Task>>(
      stream: fireRepo.tasksStream(),
      builder: (context, snap) {
        if (snap.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        final tasks = snap.data ?? [];
        return Padding(
          padding: const EdgeInsets.all(16),
          child: ListView.separated(
            itemBuilder: (_, i) => _taskTile(tasks[i]),
            separatorBuilder: (_, __) => const SizedBox(height: 12),
            itemCount: tasks.length,
          ),
        );
      },
    );
  }

  Widget _taskTile(Task t) {
    return Container(
      decoration: _cardDeco(),
      child: ListTile(
        contentPadding: const EdgeInsets.all(16),
        title: Text(t.name,
            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w700)),
        subtitle: Padding(
          padding: const EdgeInsets.only(top: 6),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('Course: ${t.courseName}', style: _muted),
              Text('Assigned to: ${t.assignedTo}', style: _muted),
              Text(
                'Deadline: ${DateFormat('MMM dd, yyyy').format(t.deadline)}',
                style: t.isOverdue
                    ? const TextStyle(
                        color: Colors.red, fontWeight: FontWeight.w700)
                    : _muted,
              ),
            ],
          ),
        ),
        trailing: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Chip(
              label: Text(t.statusText),
              backgroundColor: switch (t.status) {
                TaskStatus.pending => Colors.orange.shade100,
                TaskStatus.inProgress => Colors.blue.shade100,
                TaskStatus.completed => Colors.green.shade100,
              },
            ),
            if (t.isOverdue)
              const Padding(
                padding: EdgeInsets.only(top: 6),
                child: Text('OVERDUE',
                    style: TextStyle(
                        color: Colors.red, fontWeight: FontWeight.bold)),
              ),
          ],
        ),
      ),
    );
  }

  /* ---------- Notifications ---------- */
  Widget _buildNotificationsTab() {
    return StreamBuilder<List<AppNotification>>(
      stream: fireRepo.notificationsStream(userRole: 'admin'),
      builder: (context, snap) {
        if (snap.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        final notifications = snap.data ?? [];
        return ListView.builder(
          padding: const EdgeInsets.all(16),
          itemCount: notifications.length,
          itemBuilder: (_, i) {
            final n = notifications[i];
            return Container(
              margin: const EdgeInsets.only(bottom: 12),
              decoration: _cardDeco(),
              child: ListTile(
                leading: CircleAvatar(
                  backgroundColor: switch (n.type) {
                    NotificationType.scheduleCancelled => Colors.red,
                    NotificationType.scheduleRescheduled => Colors.orange,
                    NotificationType.taskAssigned => Colors.blue,
                  },
                  child: Icon(
                    switch (n.type) {
                      NotificationType.scheduleCancelled => Icons.cancel,
                      NotificationType.scheduleRescheduled => Icons.schedule,
                      NotificationType.taskAssigned => Icons.assignment,
                    },
                    color: Colors.white,
                  ),
                ),
                title: Text(n.title,
                    style: const TextStyle(fontWeight: FontWeight.w700)),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(n.message),
                    const SizedBox(height: 4),
                    Text(n.timeAgo, style: _muted),
                  ],
                ),
                trailing: n.isRead
                    ? null
                    : const Icon(Icons.fiber_manual_record,
                        color: Colors.red, size: 12),
                onTap: () {
                  FirebaseFirestore.instance
                      .collection('notifications')
                      .doc(n.id)
                      .update({'isRead': true});
                },
              ),
            );
          },
        );
      },
    );
  }

  /* ---------- Dialogs (write to Firestore) ---------- */

  void _showCreateScheduleDialog() {
    final courseCtrl = TextEditingController();
    final studentCtrl = TextEditingController();
    DateTime? when;

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Create Schedule'),
        content: StatefulBuilder(
          builder: (ctx, setS) => SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: courseCtrl,
                  decoration: const InputDecoration(
                    labelText: 'Course (e.g., Flutter)',
                    border: OutlineInputBorder(),
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: studentCtrl,
                  decoration: const InputDecoration(
                    labelText: 'Student Name or Id',
                    border: OutlineInputBorder(),
                  ),
                ),
                const SizedBox(height: 12),
                ListTile(
                  contentPadding: EdgeInsets.zero,
                  title: Text(
                    when == null
                        ? 'Pick Date & Time'
                        : DateFormat('EEE, MMM d â€¢ h:mm a').format(when!),
                  ),
                  trailing: const Icon(Icons.calendar_today),
                  onTap: () async {
                    final date = await showDatePicker(
                      context: ctx,
                      firstDate: DateTime.now(),
                      lastDate: DateTime.now().add(const Duration(days: 365)),
                      initialDate: DateTime.now().add(const Duration(days: 1)),
                    );
                    if (date == null) return;
                    final time = await showTimePicker(
                      context: ctx,
                      initialTime: const TimeOfDay(hour: 10, minute: 0),
                    );
                    if (time == null) return;
                    setS(() => when = DateTime(date.year, date.month, date.day,
                        time.hour, time.minute));
                  },
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel')),
          FilledButton(
            onPressed: () async {
              if (courseCtrl.text.isEmpty ||
                  studentCtrl.text.isEmpty ||
                  when == null) {
                ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Fill all fields')));
                return;
              }
              await fireRepo.createSchedule(
                Schedule(
                  id: 'tmp',
                  courseName: courseCtrl.text.trim(),
                  mentorId: '1',
                  studentId: studentCtrl.text.trim(), // or uid mapping
                  scheduledTime: when!,
                ),
              );
              await fireRepo.addNotification(
                AppNotification(
                  id: 'tmp',
                  title: 'New Schedule',
                  message:
                      '${studentCtrl.text.trim()} scheduled ${courseCtrl.text.trim()}',
                  type: NotificationType.taskAssigned,
                  timestamp: DateTime.now(),
                ),
              );
              if (!mounted) return;
              Navigator.pop(context);
            },
            child: const Text('Create'),
          ),
        ],
      ),
    );
  }

  void _showCreateTaskDialog() {
    final name = TextEditingController();
    final course = TextEditingController();
    final assignedTo = TextEditingController();
    DateTime? deadline;

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Assign Task'),
        content: StatefulBuilder(
          builder: (ctx, setS) => SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: name,
                  decoration: const InputDecoration(
                    labelText: 'Task name',
                    border: OutlineInputBorder(),
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: course,
                  decoration: const InputDecoration(
                    labelText: 'Course',
                    border: OutlineInputBorder(),
                  ),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: assignedTo,
                  decoration: const InputDecoration(
                    labelText: 'Assign to (student)',
                    border: OutlineInputBorder(),
                  ),
                ),
                const SizedBox(height: 12),
                ListTile(
                  contentPadding: EdgeInsets.zero,
                  title: Text(
                    deadline == null
                        ? 'Pick Deadline'
                        : DateFormat('MMM dd, yyyy').format(deadline!),
                  ),
                  trailing: const Icon(Icons.event),
                  onTap: () async {
                    final date = await showDatePicker(
                      context: ctx,
                      firstDate: DateTime.now(),
                      lastDate: DateTime.now().add(const Duration(days: 365)),
                      initialDate: DateTime.now().add(const Duration(days: 7)),
                    );
                    if (date != null) setS(() => deadline = date);
                  },
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel')),
          FilledButton(
            onPressed: () async {
              if (name.text.isEmpty ||
                  course.text.isEmpty ||
                  assignedTo.text.isEmpty ||
                  deadline == null) {
                ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Fill all fields')));
                return;
              }
              await fireRepo.addTask(
                Task(
                  id: 'tmp',
                  name: name.text.trim(),
                  courseName: course.text.trim(),
                  assignedTo: assignedTo.text.trim(),
                  deadline: deadline!,
                ),
              );
              await fireRepo.addNotification(
                AppNotification(
                  id: 'tmp',
                  title: 'Task Assigned',
                  message:
                      '${assignedTo.text.trim()} â†’ ${name.text.trim()} (${course.text.trim()})',
                  type: NotificationType.taskAssigned,
                  timestamp: DateTime.now(),
                ),
              );
              if (!mounted) return;
              Navigator.pop(context);
            },
            child: const Text('Assign'),
          ),
        ],
      ),
    );
  }

  BoxDecoration _cardDeco() => BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: const [
          BoxShadow(
              color: Color(0x11000000), blurRadius: 10, offset: Offset(0, 4)),
        ],
      );

  TextStyle get _muted => TextStyle(color: Colors.grey.shade600, fontSize: 13);
}

/* ========================= INTERN DASHBOARD ========================= */

class InternDashboard extends StatefulWidget {
  const InternDashboard({super.key});

  @override
  State<InternDashboard> createState() => _InternDashboardState();
}

class _InternDashboardState extends State<InternDashboard> {
  int _currentIndex = 0;
  String _selectedCourse = 'Flutter';

  final List<String> _enrolledCourses = [
    'Flutter',
    'UI/UX',
    'Backend Development'
  ];

  @override
  Widget build(BuildContext context) {
    final pages = [_schedulePage(), _tasksPage()];

    return Scaffold(
      appBar: AppBar(
        title: const Text('Intern Dashboard'),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () async {
              await FirebaseAuth.instance.signOut();
              if (!mounted) return;
              Navigator.pushReplacement(context,
                  MaterialPageRoute(builder: (_) => const LoginPage()));
            },
          ),
        ],
      ),
      body: pages[_currentIndex],
      bottomNavigationBar: NavigationBar(
        selectedIndex: _currentIndex,
        onDestinationSelected: (i) => setState(() => _currentIndex = i),
        destinations: const [
          NavigationDestination(
              icon: Icon(Icons.schedule_outlined), label: 'Schedule'),
          NavigationDestination(
              icon: Icon(Icons.assignment_outlined), label: 'Tasks'),
        ],
      ),
    );
  }

  /* ---------- Schedule ---------- */
  Widget _schedulePage() {
    // NOTE: in real apps, use current UID. For demo, we filter by a placeholder "1".
    final studentId = FirebaseAuth.instance.currentUser?.uid ?? '1';
    return StreamBuilder<List<Schedule>>(
      stream: fireRepo.schedulesStream(
          course: _selectedCourse, studentId: studentId),
      builder: (context, snap) {
        final courseSchedules = snap.data ?? [];
        return SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: const [
                    BoxShadow(
                      color: Color(0x11000000),
                      blurRadius: 10,
                      offset: Offset(0, 4),
                    ),
                  ],
                ),
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('Select Course',
                        style: TextStyle(
                            fontSize: 16, fontWeight: FontWeight.w600)),
                    const SizedBox(height: 8),
                    DropdownButtonFormField<String>(
                      value: _selectedCourse,
                      items: _enrolledCourses
                          .map(
                              (c) => DropdownMenuItem(value: c, child: Text(c)))
                          .toList(),
                      onChanged: (v) => setState(() => _selectedCourse = v!),
                      decoration: const InputDecoration(
                        border: OutlineInputBorder(),
                        contentPadding:
                            EdgeInsets.symmetric(horizontal: 12, vertical: 10),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 16),
              Text('Schedules for $_selectedCourse',
                  style: const TextStyle(
                      fontSize: 18, fontWeight: FontWeight.w700)),
              const SizedBox(height: 12),
              if (snap.connectionState == ConnectionState.waiting)
                const Center(child: CircularProgressIndicator())
              else if (courseSchedules.isEmpty)
                Container(
                  width: double.infinity,
                  decoration: _cardDeco(),
                  padding: const EdgeInsets.all(24),
                  child: const Center(
                    child: Text('No schedules found for this course',
                        style: TextStyle(color: Colors.grey)),
                  ),
                )
              else
                ...courseSchedules.map(_scheduleCard),
            ],
          ),
        );
      },
    );
  }

  Widget _scheduleCard(Schedule s) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      decoration: _cardDeco(),
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [
            Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
              Text(s.courseName,
                  style: const TextStyle(
                      fontSize: 16, fontWeight: FontWeight.w700)),
              const SizedBox(height: 4),
              Text(s.formattedTime,
                  style: TextStyle(color: Colors.grey.shade600)),
            ]),
            Chip(
              label: Text(s.statusText),
              backgroundColor: switch (s.status) {
                ScheduleStatus.scheduled => Colors.green.shade100,
                ScheduleStatus.cancelled => Colors.red.shade100,
                ScheduleStatus.rescheduled => Colors.orange.shade100,
              },
            ),
          ]),
          const SizedBox(height: 12),
          Row(
            children: [
              Expanded(
                child: OutlinedButton.icon(
                  icon: const Icon(Icons.schedule),
                  label: const Text('Reschedule'),
                  onPressed: () => _showRescheduleDialog(s),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.orange,
                    side: const BorderSide(color: Colors.orange),
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: OutlinedButton.icon(
                  icon: const Icon(Icons.cancel),
                  label: const Text('Cancel'),
                  onPressed: () => _showCancelDialog(s),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.red,
                    side: const BorderSide(color: Colors.red),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /* ---------- Tasks ---------- */
  Widget _tasksPage() {
    final assignedTo =
        FirebaseAuth.instance.currentUser?.email ?? 'user@example.com';
    return StreamBuilder<List<Task>>(
      stream: fireRepo.tasksStream(assignedTo: assignedTo),
      builder: (context, snap) {
        final tasks = snap.data ?? [];
        if (snap.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        return Padding(
          padding: const EdgeInsets.all(16),
          child: ListView.separated(
            itemBuilder: (_, i) => _taskCard(tasks[i]),
            separatorBuilder: (_, __) => const SizedBox(height: 12),
            itemCount: tasks.length,
          ),
        );
      },
    );
  }

  Widget _taskCard(Task t) {
    return Container(
      decoration: _cardDeco(),
      padding: const EdgeInsets.all(16),
      child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
        Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [
          Expanded(
            child:
                Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
              Text(t.name,
                  style: const TextStyle(
                      fontSize: 16, fontWeight: FontWeight.w700)),
              const SizedBox(height: 4),
              Text('Course: ${t.courseName}', style: _muted),
              const SizedBox(height: 4),
              Text('Deadline: ${DateFormat('MMM dd, yyyy').format(t.deadline)}',
                  style: t.isOverdue
                      ? const TextStyle(
                          color: Colors.red, fontWeight: FontWeight.w700)
                      : _muted),
            ]),
          ),
          Column(children: [
            Chip(
              label: Text(t.statusText),
              backgroundColor: switch (t.status) {
                TaskStatus.pending => Colors.orange.shade100,
                TaskStatus.inProgress => Colors.blue.shade100,
                TaskStatus.completed => Colors.green.shade100,
              },
            ),
            if (t.isOverdue)
              const Padding(
                padding: EdgeInsets.only(top: 6),
                child: Text('OVERDUE',
                    style: TextStyle(
                        color: Colors.red, fontWeight: FontWeight.bold)),
              ),
          ]),
        ]),
        const SizedBox(height: 12),
        if (t.status != TaskStatus.completed)
          Row(children: [
            if (t.status == TaskStatus.pending)
              Expanded(
                child: FilledButton.icon(
                  icon: const Icon(Icons.play_arrow),
                  label: const Text('Start Task'),
                  onPressed: () =>
                      _updateTaskStatus(t.id, TaskStatus.inProgress),
                ),
              ),
            if (t.status == TaskStatus.inProgress) ...[
              Expanded(
                child: FilledButton.icon(
                  icon: const Icon(Icons.check),
                  label: const Text('Mark Complete'),
                  onPressed: () =>
                      _updateTaskStatus(t.id, TaskStatus.completed),
                ),
              ),
            ],
          ]),
      ]),
    );
  }

  /* ---------- Intern Actions (Firestore updates) ---------- */

  void _showRescheduleDialog(Schedule s) {
    DateTime? when;
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Reschedule Session'),
        content: StatefulBuilder(
          builder: (ctx, setS) => Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                contentPadding: EdgeInsets.zero,
                title: Text(
                  when == null
                      ? 'Pick Date & Time'
                      : DateFormat('EEE, MMM d â€¢ h:mm a').format(when!),
                ),
                trailing: const Icon(Icons.calendar_month),
                onTap: () async {
                  final date = await showDatePicker(
                    context: ctx,
                    initialDate: DateTime.now().add(const Duration(days: 1)),
                    firstDate: DateTime.now(),
                    lastDate: DateTime.now().add(const Duration(days: 365)),
                  );
                  if (date == null) return;
                  final time = await showTimePicker(
                    context: ctx,
                    initialTime: TimeOfDay.fromDateTime(s.scheduledTime),
                  );
                  if (time == null) return;
                  setS(() => when = DateTime(
                      date.year, date.month, date.day, time.hour, time.minute));
                },
              ),
              const SizedBox(height: 8),
              const Text('Admin will be notified on changes.',
                  style: TextStyle(color: Colors.grey)),
            ],
          ),
        ),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel')),
          FilledButton(
            onPressed: () async {
              if (when == null) return;
              await fireRepo.updateSchedule(s.id, {
                'scheduledTime': Timestamp.fromDate(when!),
                'status': ScheduleStatus.rescheduled.name,
              });
              if (!mounted) return;
              ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                  content: Text('Session rescheduled. Admin notified.')));
              Navigator.pop(context);
            },
            child: const Text('Reschedule'),
          ),
        ],
      ),
    );
  }

  void _showCancelDialog(Schedule s) {
    final reason = TextEditingController();
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Cancel Session'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text('Provide a reason (optional):'),
            const SizedBox(height: 8),
            TextField(
              controller: reason,
              maxLines: 2,
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
                hintText: 'Reason for cancellation',
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('No, Keep')),
          FilledButton.tonalIcon(
            icon: const Icon(Icons.cancel),
            label: const Text('Yes, Cancel'),
            onPressed: () async {
              await fireRepo.updateSchedule(s.id, {
                'status': ScheduleStatus.cancelled.name,
                'cancelReason': reason.text.trim(),
              });
              if (!mounted) return;
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                content: Text(
                    'Session cancelled${reason.text.isNotEmpty ? ' â€¢ ${reason.text}' : ''}. Admin notified.'),
                backgroundColor: Colors.orange,
              ));
              Navigator.pop(context);
            },
          ),
        ],
      ),
    );
  }

  Future<void> _updateTaskStatus(String id, TaskStatus status) async {
    await fireRepo.updateTask(id, {'status': status.name});
    if (!mounted) return;
    ScaffoldMessenger.of(context)
        .showSnackBar(SnackBar(content: Text('Task status: ${status.name}')));
  }

  BoxDecoration _cardDeco() => BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: const [
          BoxShadow(
              color: Color(0x11000000), blurRadius: 10, offset: Offset(0, 4)),
        ],
      );

  TextStyle get _muted => TextStyle(color: Colors.grey.shade600, fontSize: 13);
}
